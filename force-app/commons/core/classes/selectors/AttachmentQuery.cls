/**
* MIT License
*
* Copyright (c) 2019 Piotr Ko≈ºuchowski
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/**
 * Selector layer for Attachment SObjects
 */
public with sharing class AttachmentQuery extends QueryObject {
    public final static List<SObjectField> QUERIED_FIELDS = new List<SObjectField>{
            Attachment.Id,
            Attachment.Body,
            Attachment.BodyLength,
            Attachment.ContentType,
            Attachment.Description,
            Attachment.Name,
            Attachment.ParentId
    };

    public AttachmentQuery() {
        super(QUERIED_FIELDS, Attachment.SObjectType);
    }

    /**
     * @return Attachments associated with given record
     */
    public Attachment[] byParentIdAndName(Id parentId, String name) {
        this.query.setWhere('ParentId =:parentId AND Name =:name')
                .bindVariable('parentId', parentId)
                .bindVariable('name', name);

        return executeQuery();
    }

    /**
     * @return Attachments associated with given record
     */
    public Attachment[] byParentId(Id parentId) {
        return byField(Attachment.ParentId, '=', parentId);
    }

    /**
     * @return Attachments associated with given records (List or Set)
     */
    public Attachment[] byParentId(Iterable<Id> parentIds) {
        return byField(Attachment.ParentId, 'IN', parentIds);
    }
}